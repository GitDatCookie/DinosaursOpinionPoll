@using AI_Project.ViewModels
@inject IQuestionService questionService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inherits QuestionaireComponentBase

@if (!IsEditable)
{

    @if (ViewModel.TitleFieldType != EComponentTitleFieldType.RichTextTitleField && ViewModel.TitleFieldType != EComponentTitleFieldType.LabelAsTitleField)
    {
        <MudText Typo="Typo.h6" Class="mb-4 ml-4">@ViewModel.Title</MudText>
    }
    @if (ViewModel.TitleFieldType == EComponentTitleFieldType.RichTextTitleField)
    {
        <MudHtmlViewer Html="@ViewModel.Title" />
    }

    <MudTextField Class="@(ViewModel.ComponentStyle.IsLabelColourised ? "label-custom-color" : "")"
    T="string"
    @bind-Value="UserAnswer.AnswerText"
    Label="@ViewModel.ComponentStyle.Label"
    Variant="@ViewModel.ComponentStyle.TextVariant"
    Placeholder="@ViewModel.ComponentStyle.Placeholder"
    HelperText="@ViewModel.ComponentStyle.HelperText"
    AutoGrow
    MaxLines="20"
    Style=@($"--mud-palette-action-default: {ViewModel.ComponentStyle.ComponentColour}; --mud-palette-primary: {ViewModel.ComponentStyle.ComponentColour};")></MudTextField>

    @if (IsItemEditable)
    {
        <MudGrid Class="d-flex pl-5 mt-6">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(()=>DeleteQuestionAsync())">
                Delete Question
            </MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>IsEditable=true)" Class="ml-5">
                Edit Question
            </MudButton>
        </MudGrid>
    }


}
else
{
    <MultiLineInputTemplate TemplateViewModel="ViewModel" OnItemEdited="HandleQuestionEdited" />
}


@code {
    public new QuestionViewModel ViewModel
    {
        get => (QuestionViewModel)base.ViewModel;
        set => base.ViewModel = value;
    }

    [Parameter]
    public bool IsItemEditable { get; set; }

    private AnswerViewModel UserAnswer = new();

    protected override void OnInitialized()
    {
        if (UserViewModel != null && UserViewModel.Answers != null)
        {
            UserAnswer.QuestionId = ViewModel.Id;
            UserViewModel.Answers.Add(UserAnswer);
        }
    }

    public override bool Validate()
    {
        if(string.IsNullOrEmpty(UserAnswer.AnswerText))
        {
            return false;
        }
        var selectedAnswers = UserViewModel.Answers
        .Where(answer => answer.QuestionId == ViewModel.Id)
        .ToList();

        return selectedAnswers.Any() == true;
    }

    private void HandleQuestionEdited(bool edit)
    {
        IsEditable = edit;
    }

    private async Task DeleteQuestionAsync()
    {
        await ConfirmDeleteAsync(ViewModel.Id, EComponentType.Question, EQuestionComponentType.MultiLine);
    }
}

<style>
    .label-custom-color .mud-input-label {
        color: @ComponentColour !important;
    }
</style>
