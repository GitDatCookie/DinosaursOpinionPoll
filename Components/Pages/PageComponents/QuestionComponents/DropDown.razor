@inherits QuestionaireComponentBase

@if (ViewModel.TitleFieldType != EComponentTitleFieldType.RichTextTitleField && ViewModel.TitleFieldType != EComponentTitleFieldType.LabelAsTitleField)
{
    <MudText Typo="Typo.h6" Class="mb-4 ml-4">@ViewModel.Title</MudText>
}
@if (ViewModel.TitleFieldType == EComponentTitleFieldType.RichTextTitleField)
{
    <MudHtmlViewer Html="@ViewModel.Title" />
}

<MudSelect Class="@(ViewModel.ComponentStyle.IsLabelColourised ? "label-custom-color" : "")"
T="AnswerViewModel"
@bind-Value=@SelectedAnswer
Label="@ViewModel.ComponentStyle.Label"
Variant="@ViewModel.ComponentStyle.TextVariant"
Placeholder="@ViewModel.ComponentStyle.Placeholder"
HelperText="@ViewModel.ComponentStyle.HelperText"
Style=@($"--mud-palette-action-default: {ComponentColour}; --mud-palette-primary: {ComponentColour};")>
    @foreach (var answer in ViewModel.Answers)
    {
        <MudSelectItem Value="answer">@answer.AnswerText</MudSelectItem>
    }
</MudSelect>

@code {
    public new QuestionViewModel ViewModel
    {
        get => (QuestionViewModel)base.ViewModel;
        set => base.ViewModel = value;
    }

    [Parameter]
    public bool IsItemEditable { get; set; }

    private AnswerViewModel? selectedAnswer;
    private AnswerViewModel? SelectedAnswer
    {
        get => selectedAnswer;
        set
        {
            if (selectedAnswer == value)
                return;

            selectedAnswer = value;

            if (selectedAnswer != null && UserViewModel != null)
            {
                UpdateUserSelectionSingle(selectedAnswer, isSelected: true);
            }
        }
    }

    public override bool Validate()
    {
        var selectedAnswers = UserViewModel.Answers
        .Where(answer => answer.QuestionId == ViewModel.Id)
        .ToList();

        return selectedAnswers.Any() == true;
    }

    private void HandleQuestionEdited(bool edit)
    {
        IsEditable = edit;
    }

    private async Task DeleteQuestionAsync()
    {
        await ConfirmDeleteAsync(ViewModel.Id, EComponentType.Question, EQuestionComponentType.MultiLine);
    }
}

<style>
    .label-custom-color .mud-input-label {
        color: @ComponentColour !important;
    }
</style>



