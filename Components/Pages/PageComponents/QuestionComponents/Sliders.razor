@inject IQuestionService questionService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inherits QuestionaireComponentBase
@if (!IsEditable)
{
    @if (ViewModel.TitleFieldType != EComponentTitleFieldType.RichTextTitleField && ViewModel.TitleFieldType != EComponentTitleFieldType.LabelAsTitleField)
    {
        <MudText Typo="Typo.h6" Class="mb-4 ml-4">@ViewModel.Title</MudText>
    }
    @if (ViewModel.TitleFieldType == EComponentTitleFieldType.RichTextTitleField)
    {
        <MudHtmlViewer Html="@ViewModel.Title" />
    }

        <MudStack >
            <MudItem Class="d-flex flex-column align-center mt-4">
                <MudSlider 
                    @bind-Value=SelectedIndex
                    TickMarks="true"
                           TickMarkLabels="@(ViewModel.Answers.Select(answer => answer.AnswerText).ToArray())"
                           Step="1"
                           Style=@($"width:85%; --mud-palette-primary:{ViewModel.ComponentStyle.ComponentColour};" )
                           Max="ViewModel.Answers.Count() - 1" />
            </MudItem>
            <MudSpacer />
            <MudSpacer />
            <MudSpacer />
            @if (IsItemEditable)
            {
                <MudGrid Class="d-flex pl-5 mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(()=>DeleteQuestionAsync())">
                        Delete Question
                    </MudButton>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>IsEditable=true)" Class="ml-5">
                        Edit Question
                    </MudButton>
                </MudGrid>
            }
            <MudSpacer/>
        </MudStack>
}
else
{
    <SlidersTemplate TemplateViewModel="ViewModel" OnItemEdited="HandleQuestionEdited" />
}

@code {
    public new QuestionViewModel ViewModel
    {
        get => (QuestionViewModel)base.ViewModel;
        set => base.ViewModel = value;
    }
    [Parameter]
    public bool IsItemEditable { get; set; }

    private int selectedIndex;
    private int SelectedIndex
    {
        get => selectedIndex;
        set
        {
            if (selectedIndex == value)
                return;

            selectedIndex = value;

            if (ViewModel.Answers.ElementAtOrDefault(selectedIndex) is AnswerViewModel answer)
            {
                SelectedAnswer = answer;
            }
        }
    }

    private AnswerViewModel? selectedAnswer;
    private AnswerViewModel? SelectedAnswer
    {
        get => selectedAnswer;
        set
        {
            if (selectedAnswer == value)
                return;

            selectedAnswer = value;

            if (selectedAnswer != null && UserViewModel != null)
            {
                UpdateUserSelectionSingle(selectedAnswer, isSelected: true);
            }
        }
    }

    public override bool Validate()
    {
        var selectedAnswers = UserViewModel.Answers
        .Where(answer => answer.QuestionId == ViewModel.Id)
        .ToList();

        return selectedAnswers.Any() == true;
    }

    private void HandleQuestionEdited(bool edit)
    {
        IsEditable = edit;
    }

    private async Task DeleteQuestionAsync()
    {
        await ConfirmDeleteAsync(ViewModel.Id, EComponentType.Question, EQuestionComponentType.Slider);
    }
}
