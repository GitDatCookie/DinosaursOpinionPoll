@using AI_Project.ViewModels
@inject IQuestionService questionService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inherits QuestionaireComponentBase

@if (!IsEditable)
{

    @if (ViewModel.TitleFieldType != EComponentTitleFieldType.RichTextTitleField && ViewModel.TitleFieldType != EComponentTitleFieldType.LabelAsTitleField)
    {
        <MudText Typo="Typo.h6" Class="mb-4 ml-4">@ViewModel.Title</MudText>
    }
    @if (ViewModel.TitleFieldType == EComponentTitleFieldType.RichTextTitleField)
    {
        <MudHtmlViewer Html="@ViewModel.Title" />
    }

    @if (ViewModel.ComponentStyle.NumericFieldStyle.NumberType == ENumberType.Integer)
    {
        <MudNumericField Class="@(ViewModel.ComponentStyle.IsLabelColourised ? "label-custom-color" : "")"
                         T="int"
                         Label="@ViewModel.ComponentStyle.Label"
                         Variant="@ViewModel.ComponentStyle.TextVariant"
                         Placeholder="@ViewModel.ComponentStyle.Placeholder"
                         HelperText="@ViewModel.ComponentStyle.HelperText"
                         Style=@($"--mud-palette-action-default: {ComponentColour}; --mud-palette-primary: {ComponentColour};")
                         @attributes="GetMinMaxAttributes()">
        </MudNumericField>
    }
    else
    {
        <MudNumericField Class="@(ViewModel.ComponentStyle.IsLabelColourised ? "label-custom-color" : "")"
                         T="float"
                         Label="@ViewModel.ComponentStyle.Label"
                         Variant="@ViewModel.ComponentStyle.TextVariant"
                         Placeholder="@ViewModel.ComponentStyle.Placeholder"
                         HelperText="@ViewModel.ComponentStyle.HelperText"
                         Style=@($"--mud-palette-action-default: {ComponentColour}; --mud-palette-primary: {ComponentColour};")
                         @attributes="GetMinMaxAttributes()">
        </MudNumericField>
    }

    @if (IsItemEditable)
    {
        <MudGrid Class="d-flex pl-5 mt-6">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(()=>DeleteQuestionAsync())">
                Delete Question
            </MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>IsEditable=true)" Class="ml-5">
                Edit Question
            </MudButton>
        </MudGrid>
    }


}
else
{
    <NumberInputTemplate TemplateViewModel="ViewModel" OnItemEdited="HandleQuestionEdited" />
}


@code {
    public new QuestionViewModel ViewModel
    {
        get => (QuestionViewModel)base.ViewModel;
        set => base.ViewModel = value;
    }

    [Parameter]
    public bool IsItemEditable { get; set; }

    private void HandleQuestionEdited(bool edit)
    {
        IsEditable = edit;
    }

    private async Task DeleteQuestionAsync()
    {
        await ConfirmDeleteAsync(ViewModel.Id, EComponentType.Question, EQuestionComponentType.Number);
    }

    private Dictionary<string, object> GetMinMaxAttributes()
    {
        var attributes = new Dictionary<string, object>();

        switch (ViewModel.ComponentStyle.NumericFieldStyle?.NumberType)
        {
            case ENumberType.Integer:
                if (ViewModel.ComponentStyle.NumericFieldStyle.MinNumberInteger.HasValue)
                    attributes["Min"] = ViewModel.ComponentStyle.NumericFieldStyle.MinNumberInteger.Value;

                if (ViewModel.ComponentStyle.NumericFieldStyle.MaxNumberInteger.HasValue)
                    attributes["Max"] = ViewModel.ComponentStyle.NumericFieldStyle.MaxNumberInteger.Value;
                break;
            case ENumberType.Float:
                if (ViewModel.ComponentStyle.NumericFieldStyle.MinNumberFloat.HasValue)
                    attributes["Min"] = ViewModel.ComponentStyle.NumericFieldStyle.MinNumberFloat.Value;

                if (ViewModel.ComponentStyle.NumericFieldStyle.MaxNumberFloat.HasValue)
                    attributes["Max"] = ViewModel.ComponentStyle.NumericFieldStyle.MaxNumberFloat.Value;
                break;
        }

        return attributes;
    }
}

<style>
    .label-custom-color .mud-input-label {
        color: @ComponentColour !important;
    }
</style>
