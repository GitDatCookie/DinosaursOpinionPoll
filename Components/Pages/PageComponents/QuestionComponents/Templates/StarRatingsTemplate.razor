@using AI_Project.Models
@inject IQuestionService questionService
@inject ISnackbar snackbar
@inherits QuestionaireComponentBase

<MudPaper Class="d-flex flex-column pa-4">
    <MudForm @ref=mudForm>
        <MudStack Row>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.ColorLens" Color="Color.Primary" OnClick="PickColourAsync" Class="float-end" />
        </MudStack>
        <MudStack Row>
            @if (!IsRichText && !IsLabel)
            {
                <MudTextField @bind-Value="Title"
                Placeholder="Type in your Question..."
                Required
                RequiredError="Question is Required"
                Immediate />
            }
            @if (IsRichText)
            {
                <MudHtmlEditor @bind-Html=@Title style="width:100%">
                    <MudHtmlToolbarOptions InsertImage="false" />
                </MudHtmlEditor>
                @if (isSubmitted && string.IsNullOrWhiteSpace(CleanRichText(TemplateViewModel, Title)))
                {
                    <MudText Typo="Typo.caption" Color="Color.Error">
                        Question is Required
                    </MudText>
                }
            }
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="@(()=>SetQuestionOptionsAsync(EQuestionAnswerFieldType.NoAnswerField, TemplateViewModel))" Class="float-end" />
        </MudStack>

        <MudItem Class="d-flex flex-column align-center mt-4">
            <MudRating @bind-SelectedValue="RatingValue" HoveredValueChanged="HandleHoveredValueChanged" MaxValue="@EditableOptions.Count" RatingItemsStyle=@($"color:{ComponentColour}")/>
            <MudText Typo="Typo.subtitle2" Class="deep-purple-text mt-2">@LabelText</MudText>
        </MudItem>

        <MudDivider Class="my-4" />

        @foreach (var option in EditableOptions.Select((name, index) => new { Name = name.AnswerText, Index = index }))
        {
            <MudItem Class="d-flex align-items-center mb-8">
                <MudStack Row=true Class="ml-4 me-2">
                    <MudIcon Icon="@Icons.Material.Filled.StarRate" />
                    @if (EditIndex == option.Index)
                    {
                        <MudTextField Class="me-2" @bind-Value="EditableOptions[option.Index].AnswerText" Immediate="true" OnBlur="@(() => FinishEditing())" />
                    }
                    else
                    {
                        <MudText>@option.Name</MudText>
                    }
                </MudStack>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="@(() => EditIndex = option.Index)" />
                @if (EditableOptions.Count > MinStars)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => RemoveOption(option.Index))" />
                }
            </MudItem>
        }

        <MudGrid Class="d-flex pl-5 mt-6">
            @if (EditableOptions.Count < MaxStars)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>AddOption("Star"))" Class="ml-5">
                    Add Star
                </MudButton>
            }
            <MudSpacer />
            @if (!IsEditable)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@SaveQuestion">
                    Save Question
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@EditQuestion">
                    Edit Question
                </MudButton>
            }
        </MudGrid>
    </MudForm>
</MudPaper>

