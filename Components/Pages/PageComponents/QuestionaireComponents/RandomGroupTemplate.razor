@using AI_Project.Models.OrderModels
@using MudBlazor

@if (!isEditing)
{
    <MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Spacing="2">
        <MudCheckBox T="bool" @bind-Value="IsRandomBound" Label="Randomise?" />

        @if (IsRandomBound)
        {
            <MudSelect T="RandomGroupViewModel" @bind-Value="SelectedRandomGroup" Variant="Variant.Outlined" Label="Set the same group for items you want to randomise together.">
                @foreach (var group in Questionaire.RandomGroups)
                {
                    <MudSelectItem Value="@group">
                        <MudStack Row AlignItems="AlignItems.Center" Style="width:100%;">
                            <span>@group.GroupName</span>
                            <MudSpacer />
                            @if (SelectedRandomGroup != group)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                Size="Size.Small"
                                OnClick="@(() => StartEditingGroup(group))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                Size="Size.Small"
                                OnClick="@(() => DeleteGroup(group))"
                                Color="Color.Error" />
                            }
                        </MudStack>
                    </MudSelectItem>
                }
            </MudSelect>
            <MudIconButton Icon="@Icons.Material.Filled.Add"
            Size="Size.Small"
            OnClick="AddNewGroup"
            Color="Color.Primary" />
        }
    </MudStack>
}
else
{
    <MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Spacing="2">
        <MudTextField T="string"
        @bind-Value="editedGroupName"
        Label="Edit Group"
        Immediate="true"
        AutoFocus="true"
        Class="ml-8" />
        <MudIconButton Icon="@Icons.Material.Filled.Save"
        Size="Size.Small"
        OnClick="SaveEditedGroup" />
        <MudIconButton Icon="@Icons.Material.Filled.Cancel"
        Size="Size.Small"
        OnClick="CancelEditingGroup"
        Color="Color.Error" />
    </MudStack>
}

@code {
    [Parameter]
    public QuestionaireComponentViewModelBase ViewModel { get; set; }

    [Parameter]
    public QuestionairePageViewModel PageViewModel { get; set; }

    [Parameter]
    public ERandomGroupType RandomGroupType { get; set; }

    [Parameter]
    public QuestionaireViewModel Questionaire { get; set; }

    [Parameter]
    public EventCallback<List<RandomGroupViewModel>> RandomGroupsChanged { get; set; }

    private RandomGroupViewModel selectedRandomGroup = new();
    public RandomGroupViewModel SelectedRandomGroup
    {
        get => selectedRandomGroup;
        set
        {
            if (selectedRandomGroup != value)
            {
                selectedRandomGroup = value;

                switch(RandomGroupType)
                {
                    case ERandomGroupType.RandomQuestionairePageComponentGroup:
                        if (ViewModel != null)
                        {
                            ViewModel.RandomGroup = value;
                        }
                        break;
                    case ERandomGroupType.RandomPageGroup:
                        if (PageViewModel != null)
                        {
                            PageViewModel.RandomGroup = value;
                        }
                        break;
                }
            }
        }
    }

    private bool IsRandomBound
    {
        get => (RandomGroupType == ERandomGroupType.RandomQuestionairePageComponentGroup)
                    ? ViewModel.IsRandomised
                    : PageViewModel.IsRandomised;
        set
        {
            switch(RandomGroupType)
            {
                case ERandomGroupType.RandomQuestionairePageComponentGroup:
                    ViewModel.IsRandomised = value;
                    break;
                case ERandomGroupType.RandomPageGroup:
                    PageViewModel.IsRandomised = value;
                    break;
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (Questionaire != null)
        {
            if (Questionaire.RandomGroups == null)
            {
                Questionaire.RandomGroups = new List<RandomGroupViewModel>();
            }
        }

        if (!Questionaire.RandomGroups.Any())
        {
            var defaultGroup = new RandomGroupViewModel
                {
                    GroupName = "Group 1",
                    RandomGroupType = RandomGroupType
                };
            Questionaire.RandomGroups.Add(defaultGroup);
            SelectedRandomGroup = defaultGroup;
        }
        else
        {
            switch(RandomGroupType)
            {
                case ERandomGroupType.RandomQuestionairePageComponentGroup:
                    SelectedRandomGroup = ViewModel.RandomGroup != null ? ViewModel.RandomGroup : Questionaire.RandomGroups[0];
                    break;
                case ERandomGroupType.RandomPageGroup:
                    SelectedRandomGroup = PageViewModel.RandomGroup != null ? PageViewModel.RandomGroup : Questionaire.RandomGroups[0];
                    break;
            }
        }
    }

    private bool isEditing = false;
    private RandomGroupViewModel? editingGroup = null;
    private string editedGroupName { get; set; } = string.Empty;

    private void StartEditingGroup(RandomGroupViewModel group)
    {
        isEditing = true;
        editingGroup = group;
        editedGroupName = group.GroupName;
    }

    private void SaveEditedGroup()
    {
        if (editingGroup is not null && !string.IsNullOrWhiteSpace(editedGroupName))
        {
            int index = Questionaire.RandomGroups.IndexOf(editingGroup);

            if (index != -1)
            {
                Questionaire.RandomGroups[index].GroupName = editedGroupName;
                if (SelectedRandomGroup == editingGroup)
                {
                    SelectedRandomGroup = Questionaire.RandomGroups[index];
                }
            }
        }
        ExitEditingMode(); 
        StateHasChanged();
        RandomGroupsChanged.InvokeAsync(Questionaire.RandomGroups);

    }

    private void DeleteGroup(RandomGroupViewModel group)
    {
        if (Questionaire.RandomGroups.Contains(group))
        {
            Questionaire.RandomGroups.Remove(group);
            if (SelectedRandomGroup == group)
            {
                SelectedRandomGroup = new();
            }
        }
        if (editingGroup == group)
        {
            ExitEditingMode();
        }
        RandomGroupsChanged.InvokeAsync(Questionaire.RandomGroups);
    }

    private void CancelEditingMode() => ExitEditingMode();

    private void ExitEditingMode()
    {
        isEditing = false;
        editingGroup = null;
        editedGroupName = string.Empty;
    }

    private void CancelEditingGroup() => CancelEditingMode();

    private void AddNewGroup()
    {
        var newGroup = new RandomGroupViewModel { GroupName = $"Group {Questionaire.RandomGroups.Count + 1}" };
        Questionaire.RandomGroups.Add(newGroup);
        SelectedRandomGroup = newGroup;
        StartEditingGroup(newGroup);
        RandomGroupsChanged.InvokeAsync(Questionaire.RandomGroups);
    }
}
