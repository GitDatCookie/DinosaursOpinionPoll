@using AI_Project.ViewModels
@inject ISnackbar snackbar

<MudContainer>
    <MudGrid>

        @foreach (var item in CurrentPage.Items)
        {
            <MudItem xs="12">
                <ValidateDynamicComponentWrapper @ref="componentRefs[item.viewModelBase.Id]"
                                                 ComponentType=@item.componentType
                                                 QuestionComponentType=@item.questionComponentType
                                                 Parameters="@(new Dictionary<string, object> {{ "ViewModel", item.viewModelBase}, {"IsItemEditable", false}, {"UserViewModel", User}})" />
            </MudItem>

        }

        <MudItem xs="12" Class="d-flex justify-end mt-6">
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Info"
                       Disabled="@IsLastPage"
                       OnClick="NextPage">
                Next
            </MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>


@* <QuestionairePageTemplate PageViewModel="CurrentPage" /> *@

@code {
    [Parameter]
    public QuestionaireViewModel Questionaire { get; set; } = new();

    [Parameter]
    public SubjectUserViewModel User { get; set; } = new();

    private Dictionary<Guid, ValidateDynamicComponentWrapper> componentRefs = new();

    private int currentPageIndex = 0;

    private QuestionairePageViewModel CurrentPage =>
        Questionaire.PageList.ElementAtOrDefault(currentPageIndex) ?? new();

    private bool IsLastPage => currentPageIndex >= Questionaire.PageList.Count - 1;

    private void NextPage()
    {
        bool isValid = componentRefs.Values.All(wrapper => wrapper.Validate());

        if (!isValid)
        {
            snackbar.Add("Please answer all required questions.", Severity.Error);
            return;
        }

        if (!IsLastPage)
            currentPageIndex++;
    }
}