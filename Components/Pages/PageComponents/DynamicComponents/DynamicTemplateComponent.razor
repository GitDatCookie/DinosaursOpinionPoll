<DynamicComponent Type="@GetTemplateType(ComponentType, QuestionComponentType)" Parameters="@(new Dictionary<string, object> { { "TemplateViewModel", ViewModel } })" />

@code {
    [Parameter] public EComponentType ComponentType{ get; set; }

    [Parameter] public EQuestionComponentType QuestionComponentType { get; set; }

    [Parameter] public QuestionaireComponentViewModelBase ViewModel { get; set; } = null!;

    private Type GetTemplateType(EComponentType componentType, EQuestionComponentType questionComponentType)
    {
        return componentType switch
        {
            EComponentType.Question => questionComponentType switch
            {
                EQuestionComponentType.CheckBox => typeof(CheckBoxTemplate),
                EQuestionComponentType.RadioButton => typeof(RadioButtonsTemplate),
                EQuestionComponentType.StarRating => typeof(StarRatingsTemplate),
                EQuestionComponentType.Slider => typeof(SlidersTemplate),
                EQuestionComponentType.SingleLine => typeof(SingleLineInputTemplate),
                EQuestionComponentType.MultiLine => typeof(MultiLineInputTemplate),
                EQuestionComponentType.DropDown => typeof(DropDownTemplate),
                EQuestionComponentType.Number => typeof(NumberInputTemplate),
                _ => throw new NotSupportedException($"Unsupported question type: {questionComponentType}")
            },
            EComponentType.FreeText => typeof(FreeTextTemplate),
            EComponentType.Image => typeof(ImageTemplate),
            EComponentType.Video => typeof(VideoTemplate),
            _ => throw new NotSupportedException($"Unsupported item type: {componentType}")
        };
    }
}

