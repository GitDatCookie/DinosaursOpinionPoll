@using AI_Project.Enums
@using AI_Project.ViewModels
@using System.Text.RegularExpressions
@inject IQuestionService questionService
@inject IVideoService videoService
@inject IImageService imageService
@inject ITextService textService
@inject IEventNotificationService NotificationService

@implements IDisposable



@foreach(var item in ItemModel)
{
    <MudTooltip ShowOnHover Color=Color.Inherit Arrow="true" Placement="Placement.Right" Style="max-width: 500px" Class="border-2 border-dotted mud-border-primary" Delay="500" >
        <ChildContent>
            <MudListItem T=string
            Text="@GeneratePreview(item.Title)"
            Icon="@Icon"
            onclick="@(()=>OnItemSelected.InvokeAsync((item, ItemType, QuestionType)))" 
            />

        </ChildContent>
        <TooltipContent>
            <MudText Color=Color.Primary Align="Align.Start" Typo="Typo.subtitle2" Class="mb-2">Title:</MudText>
            <MudText Color=Color.Inherit Align="Align.Start" Typo="Typo.body2" Style="max-width: 500px">@item.Title</MudText>
        </TooltipContent>
    </MudTooltip>
}

@code {
    [Parameter]
    public EventCallback<(QuestionaireComponentViewModelBase, EItemType, EQuestionType)> OnItemSelected { get; set; }

    [Parameter]
    public EQuestionType QuestionType { get; set; }

    [Parameter] 
    public EItemType ItemType { get; set; }

    [Parameter]
    public string Icon { get; set; }

    public List<QuestionaireComponentViewModelBase> ItemModel { get; set; } = new();

    public void Reload()
    {
        LoadQuestionaireItems();
        StateHasChanged();
    }

    public string GeneratePreview(string itemTitle)
    {
        return itemTitle.Count() > 33
        ? $"{itemTitle.Substring(0, 32).ToString()} ..."
        : itemTitle;
    }

    public void LoadQuestionaireItems()
    {
        switch (ItemType)
        {
            case EItemType.Image:
                ItemModel = imageService.GetImages()
                                         .Cast<QuestionaireComponentViewModelBase>()
                                         .ToList();
                break;
            case EItemType.Video:
                ItemModel = videoService.GetVideos()
                                         .Cast<QuestionaireComponentViewModelBase>()
                                         .ToList();
                break;
            case EItemType.FreeText:
                ItemModel = textService.GetTexts()
                                         .Cast<QuestionaireComponentViewModelBase>()
                                         .ToList();
                break;
            case EItemType.Question:
                ItemModel = questionService.GetQuestionsByType(QuestionType)
                                           .Cast<QuestionaireComponentViewModelBase>()
                                           .ToList();
                break;
            default:
                ItemModel = new List<QuestionaireComponentViewModelBase>();
                break;
        }
    }

    protected override void OnInitialized()
    {
        NotificationService.QuestionChanged += OnQuestionChanged;
        NotificationService.ItemChanged += OnItemChanged; 
        LoadQuestionaireItems();
    }

    private void OnQuestionChanged(EQuestionType questionType)
    {

        if (questionType != this.QuestionType) return;

        LoadQuestionaireItems();
        InvokeAsync(StateHasChanged);
    }

    private void OnItemChanged(EItemType itemType)
    {

        if (itemType != this.ItemType) return;

        LoadQuestionaireItems();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NotificationService.QuestionChanged -= OnQuestionChanged;
        NotificationService.ItemChanged -= OnItemChanged;
    }
}