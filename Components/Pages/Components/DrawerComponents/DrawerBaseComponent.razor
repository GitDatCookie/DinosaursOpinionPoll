@using AI_Project.Enums
@using AI_Project.ViewModels
@using System.Text.RegularExpressions
@inject IQuestionService questionService
@inject IEventNotificationService NotificationService


<MudListItem T="string" Text="@elementText" Icon="@Icons.Material.Filled.QuestionMark">
    <NestedList>
        @if(!IsTemplate)
        {
            @foreach (var item in itemList.Where(x => x.ItemType == EItemType.Question))
            {
                <MudListItem T="string" Text="@item.Title" Icon="@item.Icon">
                    <NestedList>
                        <ItemDrawerComponent ItemType="@item.ItemType" QuestionType="@item.QuestionType" OnItemSelected="HandleItemSelected"></ItemDrawerComponent>
                    </NestedList>
                </MudListItem>
            }
        }
        else
        {
            @foreach (var item in itemList.Where(x => x.ItemType == EItemType.Question))
            {
                <TemplateDrawerComponent 
                    ItemType="@item.ItemType" 
                    QuestionType="@item.QuestionType" 
                    Icon="@item.Icon" 
                    Title=@($"{@item.Title} Template") 
                    OnTemplateSelected="HandleTemplateSelected"></TemplateDrawerComponent>
            }
        }
    </NestedList>
</MudListItem>
<MudListItem T="string" Text="@attachmentText" Icon="@Icons.Material.Filled.Attachment">
    <NestedList>
        @if(!IsTemplate)
        {
            @foreach (var item in itemList.Where(x => x.ItemType != EItemType.Question))
            {
                <MudListItem T="string" Text="@item.Title" Icon="@item.Icon">
                    <NestedList>
                        <ItemDrawerComponent ItemType="item.ItemType" QuestionType="item.QuestionType" Icon="item.Icon" OnItemSelected="HandleItemSelected"></ItemDrawerComponent>
                    </NestedList>
                </MudListItem>
            }
        }
        else
        {
            @foreach (var item in itemList.Where(x => x.ItemType != EItemType.Question))
            {
            <TemplateDrawerComponent ItemType="@item.ItemType"
                                     QuestionType="@item.QuestionType"
                                     Icon="@item.Icon"
                                     Title=@($"{@item.Title} Template")
                                     OnTemplateSelected="HandleTemplateSelected"></TemplateDrawerComponent>
            }
        }
    </NestedList>
</MudListItem>

@code {
    [Parameter]
    public EventCallback<(QuestionaireComponentViewModelBase, EItemType, EQuestionType)> OnItemSelected { get; set; }

    [Parameter]
    public EventCallback<(EItemType, EQuestionType)> OnTemplateSelected { get; set; }

    [Parameter]
    public bool IsTemplate { get; set; } = false;

    private string elementText = "Saved Question Elements";
    private string attachmentText = "Saved Attachments";

    private static List<(EItemType ItemType, string Title, EQuestionType QuestionType, string Icon)> itemList = new List<(EItemType, string, EQuestionType, string)>
    {
        (EItemType.FreeText, "Text", EQuestionType.None, Icons.Material.Filled.TextSnippet),
        (EItemType.Image, "Image", EQuestionType.None, Icons.Material.Filled.Image),
        (EItemType.Video, "Video", EQuestionType.None, Icons.Material.Filled.VideoFile),
        (EItemType.Question, "Checkbox", EQuestionType.CheckBox, Icons.Material.Filled.CheckBox),
        (EItemType.Question, "RadioButton", EQuestionType.RadioButton, Icons.Material.Filled.RadioButtonChecked),
        (EItemType.Question, "StarRate", EQuestionType.StarRating, Icons.Material.Filled.StarRate),
        (EItemType.Question, "Sliders", EQuestionType.Slider, Icons.Material.Filled.LinearScale),
        (EItemType.Question, "SingleLine Textfields", EQuestionType.SingleLine, Icons.Material.Filled.ShortText),
        (EItemType.Question, "Multiline Textfields", EQuestionType.MultiLine, Icons.Material.Filled.ViewHeadline),
        (EItemType.Question, "DropDown", EQuestionType.DropDown, Icons.Material.Filled.List),
        (EItemType.Question, "Numbers", EQuestionType.Number, Icons.Material.Filled.Numbers)
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(IsTemplate)
        {
            elementText = "Question Elements";
            attachmentText = "Attachments";
        }
    }

    private async Task HandleItemSelected((QuestionaireComponentViewModelBase item, EItemType itemType, EQuestionType questionType) selectedItem)
    {
        await OnItemSelected.InvokeAsync(selectedItem);
    }

    private async Task HandleTemplateSelected((EItemType itemType, EQuestionType questionType) selectedTemplate)
    {
        await OnTemplateSelected.InvokeAsync(selectedTemplate);
    }

}