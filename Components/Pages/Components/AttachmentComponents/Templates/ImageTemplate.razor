@inherits QuestionaireComponentBase

<MudPaper Class="d-flex flex-column pa-4">

    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .jpeg" FilesChanged="UploadFiles2" MaximumFileCount="100">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.UploadFile">
                Upload Image
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>

    @if(Image is not null)
    {
        <MudPaper Class="d-flex justify-center align-center mt-4" Style="width: 100%; overflow: auto;">
            <MudImage Src="@Image"
            ObjectFit="ObjectFit.ScaleDown"
            ObjectPosition="ObjectPosition.Center"
            Alt="Image"
            Style="max-width: 100%; height: auto;" />
        </MudPaper>  
    }




    <MudSpacer />
    @if (!IsEditable)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@SaveImage">
            Save Image
        </MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@EditImage">
            Change Image
        </MudButton>
    }

</MudPaper>

@code{
    [Parameter]
    public new ImageViewModel TemplateViewModel
    {
        get => (ImageViewModel)base.ViewModel;
        set => base.ViewModel = value; 
    }

    public string Image { get; set; } = string.Empty;

    private async Task UploadFiles2(IBrowserFile file)
    {
        await using var fs = new MemoryStream();
        await file.OpenReadStream(maxAllowedSize: 20971520).CopyToAsync(fs);
        Image = $"data:image/png;base64, {Convert.ToBase64String(fs.ToArray())}";
        Console.WriteLine(Image);
    }

    public string test { get; set; } = "";

    private MudHtmlEditor editor = default!;

    protected override void OnInitialized()
    {
        if (TemplateViewModel != null && TemplateViewModel.Id != new Guid())
        {
            IsEditable = true;
            Title = TemplateViewModel.Title;
            Image = TemplateViewModel.Data;
        }
    }

    private async Task Reset()
    {
        await editor.Reset();
    }

    private void SaveImage()
    {
        ImageViewModel image= new()
            {
                Title = Title,
                Data = Image
            };

        SaveQuestionaireComponentModelAsync(image);
    }

    private async Task EditImage()
    {
        TemplateViewModel.Title = Title;
        TemplateViewModel.Data = Image;

        await EditQuestionaireComponentModelAsync(TemplateViewModel);
    }
}