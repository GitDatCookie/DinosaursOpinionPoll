@using AI_Project.ViewModels
@inject IQuestionService questionService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inherits QuestionaireComponentBase

@if (!IsEditable)
{
    @if (ViewModel.TitleFieldType != ETitleFieldType.RichTextTitleField && ViewModel.TitleFieldType != ETitleFieldType.LabelAsTitleField)
    {
        <MudText Typo="Typo.h6" Class="mb-4 ml-4">@ViewModel.Title</MudText>
    }
    @if (ViewModel.TitleFieldType == ETitleFieldType.RichTextTitleField)
    {
        <MudHtmlViewer Html="@ViewModel.Title" />
    }

    <MudRadioGroup T="AnswerViewModel"
    @bind-SelectedOption="selectedOption"
    ValueChanged="OnSelectedOptionChanged">
        @foreach (var answer in ViewModel.Answers)
        {
            <MudRadio T="AnswerViewModel" Value="@answer"
            Disabled="false" 
            Style=@($"--mud-palette-action-default: {ViewModel.ComponentStyle.ComponentColour};")>
                <MudText>@answer.AnswerText</MudText>
            </MudRadio>
        }
    </MudRadioGroup>

    @if (IsItemEditable)
    {
        <MudGrid Class="d-flex pl-5 mt-6">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteQuestionAsync())">
                Delete Question
            </MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => IsEditable = true)" Class="ml-5">
                Edit Question
            </MudButton>
        </MudGrid>
    }
}
else
{
    <RadioButtonsTemplate ViewModel="ViewModel" OnItemEdited="HandleQuestionEdited" />
}

@code {
    public new QuestionViewModel ViewModel
    {
        get => (QuestionViewModel)base.ViewModel;
        set => base.ViewModel = value;
    }
    [Parameter] public bool IsItemEditable { get; set; }

    private AnswerViewModel _selectedOption = null;

    private AnswerViewModel selectedOption
    {
        get => _selectedOption;
        set
        {
            if (_selectedOption != value)
            {
                _selectedOption = value;
                UpdateUserSelectionSingle(_selectedOption, true);
            }
        }
    }

    private void OnSelectedOptionChanged(AnswerViewModel newSelection)
    {
        selectedOption = newSelection;
    }

    private void HandleQuestionEdited(bool edit)
    {
        IsEditable = edit;
    }

    private async Task DeleteQuestionAsync()
    {
        await ConfirmDeleteAsync(ViewModel.Id, EItemType.Question, EQuestionType.RadioButton);
    }
}

