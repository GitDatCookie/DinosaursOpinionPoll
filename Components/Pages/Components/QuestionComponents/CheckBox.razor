@using AI_Project.ViewModels
@inject IQuestionService questionService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inherits QuestionaireComponentBase

@if (!IsEditable)
{
    @if(ViewModel.TitleFieldType != ETitleFieldType.RichTextTitleField && ViewModel.TitleFieldType != ETitleFieldType.LabelAsTitleField)
    {
        <MudText Typo="Typo.h6" Class="mb-4 ml-4">@ViewModel.Title</MudText>
    }
    @if(ViewModel.TitleFieldType == ETitleFieldType.RichTextTitleField)
    {
        <MudHtmlViewer Html="@ViewModel.Title" />
    }
        @foreach (var answer in ViewModel.Answers)
        {
            <MudCheckBox 
                onclick="@(() => UpdateUserSelection(answer, !IsAnswerSelected(answer)))"
                T="bool" 
                Disabled="false" 
                Style=@($"--mud-palette-action-default: {ViewModel.ComponentStyle.ComponentColour};")>
                <MudText T="string">@answer.AnswerText</MudText>
            </MudCheckBox>
        }

        @if (IsItemEditable)
        {
            <MudGrid Class="d-flex pl-5 mt-6">
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(()=>DeleteQuestionAsync())">
                    Delete Question
                </MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>IsEditable=true)" Class="ml-5">
                    Edit Question
                </MudButton>
            </MudGrid>
        }


}
else
{
    <CheckBoxTemplate TemplateViewModel="ViewModel" OnItemEdited="HandleQuestionEdited" />
}


@code {
    public new QuestionViewModel ViewModel
    {
        get => (QuestionViewModel)base.ViewModel;
        set => base.ViewModel = value;
    }

    [Parameter]
    public bool IsItemEditable { get; set; }

    private void HandleQuestionEdited(bool edit)
    {
        IsEditable = edit;
    }

    private async Task DeleteQuestionAsync()
    {
        await ConfirmDeleteAsync(ViewModel.Id, EItemType.Question, EQuestionType.CheckBox);
    }
}