@inherits QuestionaireComponentBase

<MudPaper  Class="pa-4">
        <MudForm @ref=mudForm>
            <MudStack Row>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.ColorLens" Color="Color.Primary" OnClick="PickColourAsync" Class="float-end" />
            </MudStack>

        <MudStack Row>
            @if (!IsRichText && !IsLabel)
            {
                <MudTextField @bind-Value="Title"
                              Placeholder="Type in your Question..."
                              Required
                              RequiredError="Question is Required"
                              Immediate />
            }
            @if (IsRichText)
            {
                <MudHtmlEditor @bind-Html=@Title style="width:100%">
                    <MudHtmlToolbarOptions InsertImage="false" />
                </MudHtmlEditor>
                @if (isSubmitted && string.IsNullOrWhiteSpace(CleanRichText(TemplateViewModel, Title)))
                {
                    <MudText Typo="Typo.caption" Color="Color.Error">
                        Question is Required
                    </MudText>
                }
            }

            <MudIconButton Class="float-end"
                           Icon="@Icons.Material.Filled.Settings"
                           Color="Color.Primary"
                           OnClick="@(()=>SetQuestionOptionsAsync(EQuestionAnswerFieldType.AnswerField, TemplateViewModel))" />
        </MudStack>

            <MudTextField 
            Class="@(TemplateViewModel.ComponentStyle.IsLabelColourised ? "label-custom-color" : "")" 
            T="string" 
            Label="@TemplateViewModel.ComponentStyle.Label" 
            Variant="@TemplateViewModel.ComponentStyle.TextVariant" 
            Placeholder="@TemplateViewModel.ComponentStyle.Placeholder"
            HelperText="@TemplateViewModel.ComponentStyle.HelperText"
            AutoGrow
            MaxLines="20"
            Style=@($"--mud-palette-action-default: {ComponentColour}; --mud-palette-primary: {ComponentColour};")></MudTextField>

            <MudGrid Class="d-flex pl-5 mt-6">
                @if (!IsEditable)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@SaveQuestion">
                        Save Question
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@EditQuestion">
                        Edit Question
                    </MudButton>
                }
            </MudGrid>
    </MudForm>
</MudPaper>


@code
{
    [Parameter]
    public new QuestionViewModel TemplateViewModel
    {
        get => (QuestionViewModel)base.ViewModel;
        set => base.ViewModel = value;
    }

    public ComponentStyleViewModel ComponentStyle { get; set; } = new();

    private MudForm mudForm;
    private bool isSubmitted;

    protected override void OnInitialized()
    {
        TemplateViewModel ??= new QuestionViewModel();
        IsEditable = TemplateViewModel?.Id != Guid.Empty;
        SetFieldFlags(TemplateViewModel.TitleFieldType);
        Title = TemplateViewModel.Title;
        ComponentColour = TemplateViewModel.ComponentStyle?.ComponentColour ?? ComponentColour;
    }

    private async void SaveQuestion()
    {
        isSubmitted = true;
        await mudForm.Validate();
        if (string.IsNullOrWhiteSpace(CleanRichText(TemplateViewModel, Title)))
        {
            mudForm.IsValid = false;
            return;
        }

        if (mudForm.IsValid)
        {
            QuestionViewModel question = new()
                {
                    QuestionType = EQuestionType.MultiLine,
                    Title = Title,
                    TitleFieldType = TemplateViewModel.TitleFieldType,
                    ComponentStyle = CreateStyleModel()
                };

            if (TemplateViewModel.TitleFieldType == ETitleFieldType.RichTextTitleField)
                SanitiseRichText(TemplateViewModel.Title);

            if (TemplateViewModel.TitleFieldType == ETitleFieldType.LabelAsTitleField)
                question.Title = TemplateViewModel.ComponentStyle.Label;

            await SaveQuestionaireComponentModelAsync(question);
        }
    }

    private async Task EditQuestion()
    {
        isSubmitted = true;
        await mudForm.Validate();
        if (string.IsNullOrWhiteSpace(Title))
        {
            mudForm.IsValid = false;
            return;
        }
        if (mudForm.IsValid)
        {
            TemplateViewModel.Title = Title;
            TemplateViewModel.ComponentStyle = CreateStyleModel();

            if (TemplateViewModel.TitleFieldType == ETitleFieldType.LabelAsTitleField)
                TemplateViewModel.Title = TemplateViewModel.ComponentStyle.Label;

            await EditQuestionaireComponentModelAsync(TemplateViewModel);
        }
    }

    private ComponentStyleViewModel CreateStyleModel() =>
    new ComponentStyleViewModel
    {
        QuestionAnswerFieldType = EQuestionAnswerFieldType.AnswerField,
        ComponentColour = ComponentColour,
        IsLabelColourised = TemplateViewModel.ComponentStyle.IsLabelColourised,
        TextVariant = TemplateViewModel.ComponentStyle.TextVariant,
        HelperText = TemplateViewModel.ComponentStyle.HelperText,
        Label = TemplateViewModel.ComponentStyle.Label,
        Placeholder = TemplateViewModel.ComponentStyle.Placeholder
    };

    private void SetFieldFlags(ETitleFieldType type)
    {
        IsRichText = type == ETitleFieldType.RichTextTitleField;
        IsLabel = type == ETitleFieldType.LabelAsTitleField;
    }
}

<style>
    .label-custom-color .mud-input-label {
        color: @ComponentColour !important;
    }
</style>
