@inject ISnackbar snackbar
@inherits QuestionaireComponentBase

<MudPaper  Class="d-flex flex-column pa-4">
    <MudForm @ref=mudForm>
        <MudStack Row>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.ColorLens" Color="Color.Primary" OnClick="PickColourAsync" Class="float-end" />
        </MudStack>
        <MudStack Row>
            @if (!IsRichText && !IsLabel)
            {
                <MudTextField @bind-Value="Title"
                Placeholder="Type in your Question..."
                Required
                RequiredError="Question is Required"
                Immediate />
            }
            @if (IsRichText)
            {
                <MudHtmlEditor @bind-Html=@Title style="width:100%">
                    <MudHtmlToolbarOptions InsertImage="false" />
                </MudHtmlEditor>
                @if (isSubmitted && string.IsNullOrWhiteSpace(CleanRichText(TemplateViewModel, Title)))
                {
                    <MudText Typo="Typo.caption" Color="Color.Error">
                        Question is Required
                    </MudText>
                }
            }
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="@(()=>SetQuestionOptionsAsync(EQuestionAnswerFieldType.NoAnswerField, TemplateViewModel))" Class="float-end" />
    </MudStack>

        @foreach (var option in EditableOptions.Select((name, index) => new { Name = name.AnswerText, Index = index }))
        {
            <MudItem Class="d-flex align-items-center mb-2">
                <div>
                    <MudCheckBox T=string Disabled="false" Class="me-2" Style=@($"--mud-palette-action-default: {ComponentColour};")>
                        @if (EditIndex == option.Index)
                        {
                            <MudTextField @bind-Value="EditableOptions[option.Index].AnswerText" Immediate="true" OnBlur="@(() => FinishEditing())" />
                        }
                        else
                        {
                            <MudText>
                                @option.Name
                            </MudText>
                        }
                    </MudCheckBox>
                </div>

                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="@(() => EditIndex = option.Index)" />
                @if (EditableOptions.Count > CheckBoxMin)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => RemoveOption(option.Index))" />
                }
            </MudItem>
        }
        <MudGrid Class="d-flex pl-5 mt-6">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() =>AddOption("Checkbox"))" Class="ml-5">
                Add Checkbox
            </MudButton>
            <MudSpacer />
            @if (!IsEditable)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@SaveQuestion">
                    Save Question
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@EditQuestion">
                    Edit Question
                </MudButton>
            }
        </MudGrid>
    </MudForm>
</MudPaper>

@code {

    [Parameter, EditorRequired]
    public new QuestionViewModel TemplateViewModel
    {
        get => (QuestionViewModel)base.ViewModel;
        set => base.ViewModel = value;
    }

    private int CheckBoxMin { get; set; } = 1;
    private MudForm mudForm;
    private bool isSubmitted;

    protected override void OnInitialized()
    {
        TemplateViewModel ??= new QuestionViewModel();
        IsEditable = TemplateViewModel?.Id != Guid.Empty;
        SetFieldFlags(TemplateViewModel.TitleFieldType);
        Title = TemplateViewModel.Title;
        ComponentColour = TemplateViewModel.ComponentStyle?.ComponentColour ?? ComponentColour;
        if(TemplateViewModel.Answers is not null)
        {
            EditableOptions = TemplateViewModel.Answers;
        }

        else
        {
            InitialiseOptions("Checkbox", 3);
        }
    }

    private async void SaveQuestion()
    {
        await mudForm.Validate();

        if (string.IsNullOrWhiteSpace(CleanRichText(TemplateViewModel, Title)))
        {
            mudForm.IsValid = false;
            return;
        }

        if (mudForm.IsValid)
        {
            QuestionViewModel question = new()
                {
                    QuestionType = EQuestionType.CheckBox,
                    Title = Title,
                    Answers = EditableOptions,
                    TitleFieldType = TemplateViewModel.TitleFieldType,
                    ComponentStyle = CreateStyleModel()
                };

            if (TemplateViewModel.TitleFieldType == ETitleFieldType.RichTextTitleField)
                SanitiseRichText(TemplateViewModel.Title);

            await SaveQuestionaireComponentModelAsync(question);
        }
    }

    private async Task EditQuestion()
    {
        isSubmitted = true;
        await mudForm.Validate();
        if (string.IsNullOrWhiteSpace(Title))
        {
            mudForm.IsValid = false;
            return;
        }

        if (mudForm.IsValid)
        {
            TemplateViewModel.Title = Title;
            TemplateViewModel.Answers = EditableOptions;
            TemplateViewModel.ComponentStyle = CreateStyleModel();

            await EditQuestionaireComponentModelAsync(TemplateViewModel);
        }
    }

    private ComponentStyleViewModel CreateStyleModel() =>
    new ComponentStyleViewModel
    {
        QuestionAnswerFieldType = EQuestionAnswerFieldType.NoAnswerField,
        ComponentColour = ComponentColour,
    };

    private void SetFieldFlags(ETitleFieldType type)
    {
        IsRichText = type == ETitleFieldType.RichTextTitleField;
    }
}
