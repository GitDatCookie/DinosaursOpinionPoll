@using MudBlazor
@using MudBlazor.Utilities
@using System.Reflection
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudStack Spacing="2">
            <MudGrid>
                @foreach (var baseColor in BasePalette)
                {
                    <MudItem xs="4" sm="2">
                        <div>
                            <MudButton OnClick="@(() => SelectBaseColor(baseColor))"
                                       Class="color-square"
                                       DropShadow="true"
                                       Style="@($"background-color: {baseColor.Base.ToString()}")" />
                        </div>
                    </MudItem>
                }
            </MudGrid>

            @if (ShowShadingOptions)
            {
                <MudDivider />
                
                @* Main tonal colors row: Dark variants, then default, then light variants. *@
                @if (MainShades.Any())
                {
                    <MudGrid Class="mt-2">
                        @foreach (var shade in MainShades)
                        {
                            <MudItem xs="4" sm="2">
                                <div>
                                    <MudButton OnClick="@(() => SelectShade(shade))"
                                               Class="color-square"
                                               Style="@($"background-color: {shade.ToString()}")"
                                               Variant="Variant.Text"
                                               Color="Color.Transparent" />
                                </div>
                            </MudItem>
                        }
                    </MudGrid>
                }

                @* Accent colors in a separate row. *@
                @if (AccentVariants.Any())
                {
                    <MudGrid Class="pt-4">
                        @foreach (var accent in AccentVariants)
                        {
                            <MudItem xs="4" sm="2">
                                <div>
                                    <MudButton OnClick="@(() => SelectShade(accent))"
                                               Class="color-square"
                                               Style="@($"background-color: {accent.ToString()}")"
                                               Variant="Variant.Text"
                                               Color="Color.Transparent" />
                                </div>
                            </MudItem>
                        }
                    </MudGrid>
                }
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <LogoIcon LogoColour="SelectedColor" />
        <MudSpacer />
        <MudButton Color="Color.Primary" OnClick="Confirm">OK</MudButton>
        <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private MudColor SelectedColor { get; set; } = Colors.Red.Default;

    private string SelectedColorName { get; set; } = "Red";

    private bool ShowShadingOptions { get; set; } = false;

    private static readonly string[] DarkenOrder = new[] { "Darken4", "Darken3", "Darken2", "Darken1" };
    private static readonly string[] LightenOrder = new[] { "Lighten1", "Lighten2", "Lighten3", "Lighten4", "Lighten5" };
    private static readonly string[] AccentOrder = new[] { "Accent4", "Accent3", "Accent2", "Accent1" };
    private static readonly string[] VariantNames = LightenOrder.Concat(DarkenOrder).Concat(AccentOrder).ToArray();

    private IEnumerable<(string Name, MudColor Base)> BasePalette => new List<(string, MudColor)>
    {
        ("Red", Colors.Red.Default),
        ("Pink", Colors.Pink.Default),
        ("Purple", Colors.Purple.Default),
        ("DeepPurple", Colors.DeepPurple.Default),
        ("Indigo", Colors.Indigo.Default),
        ("Blue", Colors.Blue.Default),
        ("LightBlue", Colors.LightBlue.Default),
        ("Cyan", Colors.Cyan.Default),
        ("Teal", Colors.Teal.Default),
        ("Green", Colors.Green.Default),
        ("LightGreen", Colors.LightGreen.Default),
        ("Lime", Colors.Lime.Default),
        ("Yellow", Colors.Yellow.Default),
        ("Amber", Colors.Amber.Default),
        ("Orange", Colors.Orange.Default),
        ("DeepOrange", Colors.DeepOrange.Default),
        ("Brown", Colors.Brown.Default),
        ("BlueGray", Colors.BlueGray.Default),
        ("Gray", Colors.Gray.Default),
        ("Black", Colors.Shades.Black),
        ("White", Colors.Shades.White)
    };

    private IEnumerable<MudColor> MainShades
    {
        get
        {
            var variants = GetVariantColors();
            var darkens = variants
                .Where(vc => vc.VariantName.StartsWith("Darken") && DarkenOrder.Contains(vc.VariantName))
                .OrderBy(vc => Array.IndexOf(DarkenOrder, vc.VariantName))
                .Select(vc => vc.Color);

            var lightens = variants
                .Where(vc => vc.VariantName.StartsWith("Lighten") && LightenOrder.Contains(vc.VariantName))
                .OrderBy(vc => Array.IndexOf(LightenOrder, vc.VariantName))
                .Select(vc => vc.Color);

            return darkens.Concat(new[] { SelectedColor }).Concat(lightens);
        }
    }

    private IEnumerable<MudColor> AccentVariants
    {
        get
        {
            var variants = GetVariantColors();
            return variants
                .Where(vc => vc.VariantName.StartsWith("Accent") && AccentOrder.Contains(vc.VariantName))
                .OrderBy(vc => Array.IndexOf(AccentOrder, vc.VariantName))
                .Select(vc => vc.Color);
        }
    }

    private IEnumerable<(string VariantName, MudColor Color)> GetVariantColors()
    {
        var variants = new List<(string, MudColor)>();
        var colorGroupType = typeof(Colors).GetNestedType(SelectedColorName, BindingFlags.Public);
        if (colorGroupType != null)
        {
            foreach (var variant in VariantNames)
            {
                var prop = colorGroupType.GetProperty(variant, BindingFlags.Public | BindingFlags.Static);
                if (prop is not null)
                {
                    var rawValue = prop.GetValue(null);
                    if (rawValue is MudColor mc)
                    {
                        variants.Add((variant, mc));
                    }
                    else if (rawValue is string s)
                    {
                        variants.Add((variant, new MudColor(s)));
                    }
                }
            }
        }
        return variants;
    }


    private void SelectBaseColor((string Name, MudColor Base) baseColor)
    {
        SelectedColor = baseColor.Base;
        SelectedColorName = baseColor.Name;
        ShowShadingOptions = true;
    }

    private void SelectShade(MudColor shade) => SelectedColor = shade;


    private void Confirm() => MudDialog.Close(DialogResult.Ok(SelectedColor));

    private void Cancel() => MudDialog.Cancel();
}
