@page "/"
@using AI_Project.Services
@inject IEventNotificationService NotificationService

<MudDrawer ClipMode="DrawerClipMode.Always" Elevation="2" Open="true">
    <MudList T="string">
        <DrawerBaseComponent IsTemplate="true" OnTemplateSelected="OnTemplateSelected"/>
        <DrawerBaseComponent OnItemSelected="OnItemHandled"/>
    </MudList>
</MudDrawer>
<MudContainer>

    @if(renderItem)
    {
        <DynamicComponentComponent 
        ItemType="@returnItem.Item2" 
        QuestionType="@returnItem.Item3" 
        ViewModel="@returnItem.Item1"
        IsItemEditable="true" />
    }
    @if(renderTemplate)
    {
        <DynamicTemplateComponent ItemType="returnTemplate.ItemType" QuestionType="returnTemplate.QuestionType"/>
    }
</MudContainer>
@code {
    private bool renderItem = false;
    private bool renderTemplate = false;

    private (QuestionaireComponentViewModelBase ViewModel, EComponentType ItemType, EQuestionComponentType QuestionType) returnItem;
    private (EComponentType ItemType, EQuestionComponentType QuestionType) returnTemplate;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NotificationService.ContainerReset += ResetContainer;
    }

    private void ResetContainer()
    {
        renderItem = false;
        renderTemplate = false;
        StateHasChanged();
    }

    private void OnItemHandled((QuestionaireComponentViewModelBase, EComponentType, EQuestionComponentType)selectedItem)
    {
        returnItem = selectedItem;
        renderTemplate = false;
        renderItem = true;
        StateHasChanged();
    }

    private void OnTemplateSelected((EComponentType, EQuestionComponentType) selectedTemplate)
    {
        returnTemplate = selectedTemplate;
        renderItem = false;
        renderTemplate = true;
        StateHasChanged();
    }
}
